name: Publish Release

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - .github/workflows/*
      - assets/*

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      python_ver: 3.11

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for proper branch operations

      - name: Set up Python ${{ env.python_ver }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python_ver }}

      - name: get version
        id: version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'plugin.json'
          prop_path: 'Version'

      - run: echo ${{steps.version.outputs.prop}}

      - name: Extract changelog for current version
        id: changelog
        run: |
          # Extract the Unreleased section from CHANGELOG.md
          CHANGELOG=$(sed -n '/## Unreleased/,/## [0-9]/p' CHANGELOG.md | sed '1d;$d' | sed '/^$/d')
          # Escape for GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "::set-output name=notes::$CHANGELOG"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./requirements.txt -t ./lib
          zip -r Flow.Launcher.Plugin.PowerPlans.zip . -x '*.git*' -x 'assets/*' -x 'LICENSE'

      - name: Publish
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          files: 'Flow.Launcher.Plugin.PowerPlans.zip'
          tag_name: "v${{steps.version.outputs.prop}}"
          body: ${{steps.changelog.outputs.notes}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CHANGELOG.md on develop
        if: success()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Checkout develop branch
          git fetch origin develop
          git checkout develop

          # Get current date
          RELEASE_DATE=$(date +%Y-%m-%d)
          VERSION="${{steps.version.outputs.prop}}"

          # Update CHANGELOG.md: Replace "## Unreleased" with version and date, add new Unreleased section
          sed -i "s/## Unreleased/## Unreleased\n\n## $VERSION - $RELEASE_DATE/" CHANGELOG.md

          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG.md after release v$VERSION"
          git push origin develop

      - name: Bump version on develop
        if: success()
        run: |
          # Parse version and increment patch version
          VERSION="${{steps.version.outputs.prop}}"
          IFS='.' read -r -a version_parts <<< "$VERSION"
          MAJOR="${version_parts[0]}"
          MINOR="${version_parts[1]}"
          PATCH="${version_parts[2]}"

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          # Update plugin.json
          sed -i "s/\"Version\": \"$VERSION\"/\"Version\": \"$NEW_VERSION\"/" plugin.json

          git add plugin.json
          git commit -m "chore: bump version to v$NEW_VERSION for next development cycle"
          git push origin develop
