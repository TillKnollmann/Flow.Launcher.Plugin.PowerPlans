name: Release Pipeline

on:
  push:
    branches:
      - main

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from plugin.json
        id: extract
        run: |
          VERSION=$(jq -r '.Version' plugin.json)
          echo "Found version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Validate semantic version
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          SEMVER_REGEX='^([0-9]+)\.([0-9]+)\.([0-9]+)$'
          if [[ ! "$VERSION" =~ $SEMVER_REGEX ]]; then
          echo "::error file=plugin.json,line=1,col=1::Invalid semantic version: '$VERSION'"
          exit 1
          fi

  build:
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install requirements to .lib
        run: pip install -r requirements.txt --target lib

      - name: Prepare publish folder
        run: |
          mkdir publish
          shopt -s extglob
          mv !(publish|.github|.git|.gitignore) publish/

      - name: Upload publish folder
        uses: actions/upload-artifact@v4
        with:
          name: publish
          path: publish

  publish:
    runs-on: ubuntu-latest
    needs: [validate-version, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download publish folder
        uses: actions/download-artifact@v4
        with:
          name: publish
          path: publish

      - name: Zip publish folder
        run: |
          REPO=$(basename ${{ github.repository }})
          cd publish
          zip -r "../${REPO}.zip" .

      - name: Set zip filename
        id: zipname
        run: |
          REPO_NAME=$(basename "${{ github.repository }}")
          echo "ZIP=${REPO_NAME}.zip" >> $GITHUB_OUTPUT

      - name: Extract changelog notes
        id: changelog
        run: |
          # Step 1: Extract bullet points from the 'Unreleased' section
          BULLETS=$(awk '/^== Unreleased/{flag=1;next}/^== /{flag=0}flag' CHANGELOG.adoc | grep '^\*')
          # Step 2: Convert Asciidoc-style links to Markdown-style links
          CONVERTED=$(echo "$BULLETS" | sed -E 's|(https://[^[]+)\[([^[]+)\]|[\2](\1)|g')
          # Write to GitHub Actions output
          echo "notes=$CONVERTED" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_PUSH }}
        with:
          tag_name: v${{ needs.validate-version.outputs.version }}
          name: Release v${{ needs.validate-version.outputs.version }}
          body: ${{ steps.changelog.outputs.notes }}
          files: ${{ steps.zipname.outputs.ZIP }}

  bump-develop:
    runs-on: ubuntu-latest
    needs: [publish, validate-version]
    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_PUSH }}
          ref: develop

      - name: Bump version in plugin.json
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          NEXT_MINOR=$((MINOR + 1))
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          NEW_VERSION="${MAJOR}.${NEXT_MINOR}.0-SNAPSHOT"
          jq --arg v "$NEW_VERSION" '.Version = $v' plugin.json > tmp && mv tmp plugin.json

      - name: Update CHANGELOG.adoc
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          DATE=$(date +"%d.%m.%y")
          TAG="v$VERSION"
          REPO_URL="https://github.com/${{ github.repository }}"
          LINK="${REPO_URL}/releases/tag/${TAG}[$VERSION]"

          # Rename old Unreleased section
          sed -i "s|^== Unreleased$|== ${LINK} â€“ ${DATE}|" CHANGELOG.adoc

          # Insert new Unreleased section directly after = Changelog
          sed '/^= Changelog$/a\
          \
          == Unreleased\
          \
          * TODO\
          ' CHANGELOG.adoc > tmp && mv tmp CHANGELOG.adoc

      - name: Commit changes
        run: |
          git config --global user.name "TillKnollmann (Bot)"
          git config --global user.email "TillKnollmann@users.noreply.github.com"
          git add plugin.json CHANGELOG.adoc
          git commit -m "ðŸ”– bump version"
          git push origin develop

